#############################################################################
##
#W  submodule.gd          WeylModules GAP package              S.R. Doty
##
##  This file contains declarations for submodules of Weyl modules.
##
#############################################################################


#! @ChapterInfo Weyl_modules, Filters
#! @Group IsSubWeylModule
#! @Arguments V
DeclareCategory( "IsSubWeylModule", 
    CategoryCollections(IsLeftAlgebraModuleElement) );

#! @ChapterInfo Weyl_modules, Constructors
#! @Description
#! The first form constructs the submodule of the given 
#! Weyl module <A>V</A> generated by the given element <A>v</A>.
#! @Returns a SubWeylModule
#! @Arguments V,v
#! @Group SubWeylModule
DeclareOperation( "SubWeylModule", [IsWeylModule,IsLeftAlgebraModuleElement]);

#! @ChapterInfo Weyl_modules, Constructors
#! @Description
#! The second form constructs the submodule (of the ambient Weyl module)
#! generated by the given submodule <A>S</A> and given element <A>v</A>.
#! @Arguments S,v
#! @Group SubWeylModule
DeclareOperation( "SubWeylModule",
     [IsSubWeylModule,IsLeftAlgebraModuleElement]);

#! @ChapterInfo Weyl_modules, Constructors
#! @Description
#! The third form constructs the submodule of the given Weyl module 
#! <A>V</A> generated by the given element <A>list</A> of elements.
#! @Arguments V,list
#! @Group SubWeylModule
DeclareOperation("SubWeylModule", [IsWeylModule,IsList]);

#! @ChapterInfo Weyl_modules, Constructors
#! @Description
#! The fourth form constructs the submodule
#! generated by the given submodule <A>S</A> and given <A>list</A> of elements.
#! @Arguments S,list
#! @Group SubWeylModule
DeclareOperation("SubWeylModule", [IsSubWeylModule,IsList]);

#! @ChapterInfo Weyl_modules, Constructors
#! @Description
#! The fifth form constructs the submodule of the Weyl module <A>V</A>
#! which is the direct sum of the given list of submodules (which are
#! assumed to be linearly independent, without checking).
#! @Arguments V,list
#! @Group SubWeylModule
DeclareOperation("SubWeylModuleDirectSum", [IsWeylModule,IsList]);

#! @ChapterInfo Weyl modules, Three types
#! @Arguments S
#! @Group IsAmbiguous
DeclareAttribute( "IsAmbiguous", IsSubWeylModule );

#! @ChapterInfo Weyl modules, Three types
#! @Arguments S
#! @Group AmbiguousMaxVecs
DeclareAttribute( "AmbiguousMaxVecs", IsSubWeylModule );

#! @ChapterInfo Weyl modules, Operations on submodules
#! @Group Generators4Sub
#! @Arguments S
#! @Returns a list
#! @Description 
#! Returns a list of generators of the given submodule <A>S</A>. 
DeclareOperation("Generators", [IsSubWeylModule]);

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments S
#! @Group BasisVecs
DeclareOperation("BasisVecs", [IsSubWeylModule]);

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments S
#! @Group Dim
DeclareAttribute("Dim", IsSubWeylModule );

#! @ChapterInfo Weyl_modules, Operations on submodules
#! @Group Ambient4Sub
#! @Description
#! This function returns the ambient Weyl module containing the given
#! submodule <A>S</A>.
#! @Returns a Weyl module
#! @Arguments S
DeclareOperation("AmbientWeylModule", [IsSubWeylModule]);

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments S
#! @Group TheCharacteristic
DeclareOperation("TheCharacteristic", [IsSubWeylModule] );

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments S
#! @Group TheLieAlgebra
DeclareAttribute("TheLieAlgebra", IsSubWeylModule );

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments S
#! @Group Weights
DeclareAttribute("Weights", IsSubWeylModule );

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments S
#! @Group DominantWeights
DeclareAttribute("DominantWeights", IsSubWeylModule );

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments S
#! @Group WeightSpaces
DeclareAttribute("WeightSpaces", IsSubWeylModule );

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments S
#! @Group Character
DeclareAttribute("Character", IsSubWeylModule );

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments S
#! @Group DominantWeightSpaces
DeclareAttribute("DominantWeightSpaces", IsSubWeylModule );

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments S,wt
#! @Group WeightSpace
DeclareOperation("WeightSpace", [IsSubWeylModule,IsList]);

# The following command is not documented at this time
DeclareOperation("SubWeylModule", [IsWeylModule,IsPosInt,IsPosInt,IsList]);

#! @ChapterInfo Weyl modules, Three types
#! @Arguments S,wt
#! @Group MaximalVectors
DeclareOperation( "MaximalVectors", [IsSubWeylModule,IsList]);

#! @ChapterInfo Weyl modules, Three types
#! @Arguments S
#! @Group MaximalVectors
DeclareAttribute( "MaximalVectors", IsSubWeylModule );

#! @ChapterInfo Weyl_modules, Operations on submodules
#! @Group IsWithin4Sub
#! @Returns true or false
#! @Arguments S,v
#! @Description
#! This function returns <K>true</K> if and only if the given 
#! vector <A>v</A> lies in the given submodule <A>S</A>. 
DeclareOperation( "IsWithin", [IsSubWeylModule,IsLeftAlgebraModuleElement]);

#! @ChapterInfo Weyl_modules, Operations on Weyl modules
#! @Group SocleWeyl
#! @Arguments V
#! @Returns a SubWeylModule
#! @Description
#! This function returns the socle of the given Weyl module <A>V</A>.
DeclareAttribute("SocleWeyl", IsWeylModule );

#! @ChapterInfo Weyl_modules, Operations on submodules
#! @Group NextSocle
#! @Returns a SubWeylModule
#! @Arguments S
#! @Description
#! This function returns the maximal submodule <A>T</A> containing 
#! the given submodule <A>S</A> such that $T/S$ is semisimple. 
#! If <A>S</A> happens to be an element of the socle series then 
#! the function returns the next element in the socle series.
DeclareOperation("NextSocle", [IsSubWeylModule]);

#! @ChapterInfo Weyl_modules, Operations on submodules
#! @Group GensNextSocle
#! @Returns a list
#! @Arguments S
#! @Description
#! This function returns a list of generators of the submodule returned by
#! `NextSocle(S)`.
DeclareOperation("GensNextSocle", [IsSubWeylModule]);

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments S
#! @Group DecompositionNumbers
DeclareAttribute("DecompositionNumbers", IsSubWeylModule );

#! @ChapterInfo Weyl_modules, Operations on submodules
#! @Group SocleLengthTwoQuotient
#! @Arguments S
#! @Returns a QuotientWeylModule
#! @Description
#! This function returns a quotient of the ambient Weyl 
#! module <A>V</A> with socle series length at most two such 
#! that <A>S</A> lies in its defining kernel. 
DeclareAttribute("SocleLengthTwoQuotient", IsSubWeylModule );

#! @ChapterInfo Weyl_modules, Operations on submodules
#! @Group TwoFactorQuotientsContaining
#! @Arguments S
#! @Returns a list of QuotientWeylModules
#! @Description
#! This returns a list of quotients of the ambient 
#! Weyl module <A>V</A> with exactly two composition factors 
#! that contain <A>S</A> in their defining kernel. Such quotients
#! realize non-split extensions of the simple at the top of <A>V</A>.
#! Even when <A>S</A> is the trivial module, we do not claim that the
#! output will give <E>all</E> of the extensions. 
DeclareAttribute("TwoFactorQuotientsContaining", IsSubWeylModule );
