#############################################################################
##
#W  submodule.gd          WeylModules GAP package              S.R. Doty
##
##  This file contains declarations for submodules of Weyl modules.
##
#############################################################################


#! @ChapterInfo Weyl_modules, Filters
#! @Group IsSubWeylModule
#! @Arguments V
DeclareCategory( "IsSubWeylModule", 
    CategoryCollections(IsLeftAlgebraModuleElement) );

#! @ChapterInfo Weyl_modules, Constructors
#! @Description
#! The first form constructs the submodule of the given 
#! Weyl module <A>V</A> generated by the given element <A>v</A>.
#! @Returns a SubWeylModule
#! @Arguments V,v
#! @Group SubWeylModule
DeclareOperation( "SubWeylModule", [IsWeylModule,IsLeftAlgebraModuleElement]);

#! @ChapterInfo Weyl_modules, Constructors
#! @Description
#! The second form constructs the submodule (of the ambient Weyl module)
#! generated by the given submodule <A>S</A> and given element <A>v</A>.
#! @Arguments S,v
#! @Group SubWeylModule
DeclareOperation( "SubWeylModule",
     [IsSubWeylModule,IsLeftAlgebraModuleElement]);

#! @ChapterInfo Weyl_modules, Constructors
#! @Description
#! The third form constructs the submodule of the given Weyl module 
#! <A>V</A> generated by the given element <A>list</A> of elements.
#! @Arguments V,list
#! @Group SubWeylModule
DeclareOperation("SubWeylModule", [IsWeylModule,IsList]);

#! @ChapterInfo Weyl_modules, Constructors
#! @Description
#! The fourth form constructs the submodule
#! generated by the given submodule <A>S</A> and given <A>list</A> of elements.
#! @Arguments S,list
#! @Group SubWeylModule
DeclareOperation("SubWeylModule", [IsSubWeylModule,IsList]);

#! @ChapterInfo Weyl_modules, Constructors
#! @Description
#! The fifth form constructs the submodule of the Weyl module <A>V</A>
#! which is the direct sum of the given list of submodules (which are
#! assumed to be linearly independent, without checking).
#! @Arguments V,list
#! @Group SubWeylModule
DeclareOperation("SubWeylModuleDirectSum", [IsWeylModule,IsList]);


DeclareAttribute( "IsAmbiguous", IsSubWeylModule );


DeclareAttribute( "AmbiguousMaxVecs", IsSubWeylModule );


DeclareOperation("Generators", [IsSubWeylModule]);


DeclareOperation("BasisVecs", [IsSubWeylModule]);


DeclareAttribute("Dim", IsSubWeylModule );

#! @ChapterInfo Weyl_modules, Unique ops for submodules
#! @Description
#! This function returns the ambient Weyl module containing the given
#! submodule <A>S</A>.
#! @Returns a Weyl module
#! @Arguments S
DeclareOperation("AmbientWeylModule", [IsSubWeylModule]);


DeclareOperation("TheCharacteristic", [IsSubWeylModule] );


DeclareAttribute("TheLieAlgebra", IsSubWeylModule );


DeclareAttribute("Weights", IsSubWeylModule );


DeclareAttribute("DominantWeights", IsSubWeylModule );


DeclareAttribute("WeightSpaces", IsSubWeylModule );


DeclareAttribute("Character", IsSubWeylModule );


DeclareAttribute("DominantWeightSpaces", IsSubWeylModule );


DeclareOperation("WeightSpace", [IsSubWeylModule,IsList]);

# The following command is not documented at this time
DeclareOperation("SubWeylModule", [IsWeylModule,IsPosInt,IsPosInt,IsList]);


DeclareOperation( "MaximalVectors", [IsSubWeylModule,IsList]);


DeclareAttribute( "MaximalVectors", IsSubWeylModule );

#! @ChapterInfo Weyl_modules, Unique ops for submodules
#! @Description
#! This function returns <K>true</K> if and only if the given 
#! vector <A>v</A> lies in the given submodule <A>S</A>. 
#! @Returns true or false
#! @Arguments S,v
DeclareOperation( "IsWithin", [IsSubWeylModule,IsLeftAlgebraModuleElement]);

#! @ChapterInfo Weyl_modules, Unique operations
#! @Description
#! This function returns the socle of the given Weyl module <A>V</A>.
#! @Returns a SubWeylModule
#! @Arguments V
DeclareAttribute("SocleWeyl", IsWeylModule );

#! @ChapterInfo Weyl_modules, Unique ops for submodules
#! @Description
#! This function returns the maximal submodule <A>T</A> containing the given
#! submodule <A>S</A> such that $T/S$ is semisimple. If $S$ happens to be an
#! element of the socle series then the function returns the next element in
#! the socle series.
#! @Returns a SubWeylModule
#! @Arguments S
DeclareOperation("NextSocle", [IsSubWeylModule]);

#! @ChapterInfo Weyl_modules, Unique ops for submodules
#! @Description
#! This function returns a list of generators of the submodule returned by
#! `NextSocle(S)`.
#! @Returns a list
#! @Arguments S
DeclareOperation("GensNextSocle", [IsSubWeylModule]);


DeclareAttribute("DecompositionNumbers", IsSubWeylModule );

#! @ChapterInfo Weyl_modules, Unique operations
#! @Description
#! This function computes the largest quotient of the Weyl module <A>V</A>
#! with at most two composition factors such that <A>S</A> lies in the 
#! defining kernel. 
#! @Returns a QuotientWeylModule
#! @Arguments V,S
#! @Group LengthTwoQuotient
DeclareOperation("LengthTwoQuotient", [IsWeylModule,IsSubWeylModule] );

#! @ChapterInfo Weyl_modules, Unique operations
#! @Description
#! This function returns a list of extension quotients of <A>V</A>
#! (quotients with two composition factors) that contain <A>S</A> in their 
#! defining kernel. 
#! @Returns a list
#! @Arguments V,S
#! @Group LengthTwoQuotient
DeclareOperation("Extensions", [IsWeylModule,IsSubWeylModule] );
