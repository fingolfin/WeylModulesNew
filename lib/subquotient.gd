#############################################################################
##
#W  subquotient.gd          WeylModules GAP package              S.R. Doty
##
##  This file contains declarations for submodules of quotient Weyl modules.
##
#############################################################################


#! @ChapterInfo Weyl_modules, Filters
#! @Arguments V
#! @Group IsSubQuotientWeylModule
DeclareCategory( "IsSubQuotientWeylModule", 
  CategoryCollections(IsLeftAlgebraModuleElement) );


#! @ChapterInfo Weyl modules, Operations on subquotients
#! @Group IsWithin4SQ
#! @Arguments T,v
#! @Returns true or false
#! @Description 
#! This returns <K>true</K> if and only if the given vector <A>v</A> lies in 
#! the given subquotient <A>T</A>.
DeclareOperation( "IsWithin", 
            [IsSubQuotientWeylModule,IsLeftAlgebraModuleElement]);

#! @ChapterInfo Weyl_modules, Constructors
#! @Group SubQuotientWeylModule
#! @Returns a SubQuotientWeylModule
#! @Arguments Q,v
#! @Description
#! Subquotients are attribute-storing objects.
#! The first form constructs the submodule of the given quotient 
#! Weyl module <A>Q</A> generated by the given element <A>v</A>.
DeclareOperation( "SubWeylModule", 
            [IsQuotientWeylModule,IsLeftAlgebraModuleElement]);

#! @ChapterInfo Weyl_modules, Constructors
#! @Group SubQuotientWeylModule
#! @Arguments S,v
#! @Description
#! The second form constructs the subquotient Weyl module (of the 
#! ambient quotient) generated by the given subquotient <A>S</A> 
#! and given element <A>v</A>.
DeclareOperation( "SubWeylModule", 
            [IsSubQuotientWeylModule,IsLeftAlgebraModuleElement]);

#! @ChapterInfo Weyl_modules, Constructors
#! @Group SubQuotientWeylModule
#! @Arguments Q,list
#! @Description
#! The third form constructs the submodule of the given quotient 
#! Weyl module <A>Q</A> generated by the given element <A>list</A> 
#! of elements.
DeclareOperation( "SubWeylModule", [IsQuotientWeylModule,IsList]);

#! @ChapterInfo Weyl_modules, Constructors
#! @Group SubQuotientWeylModule
#! @Arguments S,list
#! @Description
#! The fourth form constructs the subquotient Weyl module generated
#! by the given subquotient <A>S</A> and given <A>list</A> of elements.
DeclareOperation( "SubWeylModule", [IsSubQuotientWeylModule,IsList]);

#! @ChapterInfo Weyl_modules, Constructors
#! @Group SubQuotientWeylModule
#! @Arguments Q,list
#! @Description
#! The fifth form constructs the submodule of the quotient Weyl module <A>Q</A>
#! which is the direct sum of the given <A>list</A> of subquotients (which are
#! assumed to be linearly independent, without checking).
#! @BeginExampleSession
#! gap> W:= WeylModule(2,[2,0],"A",2);
#! V[ 2, 0 ]
#! gap> Q:= QuotientWeylModule(SocleWeyl(W));
#! 3-dimensional quotient of V[ 2, 0 ]
#! gap> m:= MaximalVectors(Q);
#! [ 1*v0 ]
#! gap> S:= SubWeylModule(Q,m[1]);
#! 3-dimensional submod of 3-dimensional quotient of V[ 2, 0 ]
#! gap> SubWeylModule(Q,m);
#! 3-dimensional submod of 3-dimensional quotient of V[ 2, 0 ]
#! @EndExampleSession
DeclareOperation("SubWeylModuleDirectSum", [IsQuotientWeylModule,IsList]);

#! @ChapterInfo Weyl modules, Operations on subquotients
#! @Group Generators4SQ
#! @Arguments T
#! @Returns a list
#! @Description 
#! This returns a list of generators for the given subquotient <A>T</A>.
DeclareOperation("Generators", [IsSubQuotientWeylModule]);

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments T
#! @Group BasisVecs
#! @BeginExampleSession
#! gap> BasisVecs(V);
#! [ 1*v0, y1*v0, y3*v0, y1^(2)*v0, y1*y3*v0, y1^(3)*v0, y3^(2)*v0, 
#!   y1^(2)*y3*v0, y1^(4)*v0, y1*y3^(2)*v0, y1^(3)*y3*v0, y3^(3)*v0, 
#!   y1^(2)*y3^(2)*v0, y1*y3^(3)*v0, y3^(4)*v0 ]
#! gap> BasisVecs(S);
#! [ y1*v0, y3*v0, y1*y3*v0, y1^(3)*v0, y1*y3^(2)*v0, y1^(2)*y3*v0, y3^(3)*v0, 
#!   y1^(3)*y3*v0, y1*y3^(3)*v0 ]
#! gap> BasisVecs(Q);
#! [ 1*v0, y1^(2)*v0, y3^(2)*v0, y1^(4)*v0, y1^(2)*y3^(2)*v0, y3^(4)*v0 ]
#! gap> BasisVecs(T);
#! [ y1^(2)*v0, y3^(2)*v0, y1^(2)*y3^(2)*v0 ]
#! @EndExampleSession
DeclareOperation("BasisVecs", [IsSubQuotientWeylModule]);

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments T
#! @Group Dim
DeclareAttribute("Dim", IsSubQuotientWeylModule );

#! @ChapterInfo Weyl_modules, Operations on subquotients
#! @Group AmbientQuotient4SQ
#! @Returns a QuotientWeylModule
#! @Arguments T
#! @Description
#! This function returns the ambient quotient Weyl module containing the given
#! subquotient <A>S</A>.
DeclareOperation("AmbientQuotient", [IsSubQuotientWeylModule]);

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments T
#! @Group TheCharacteristic
DeclareOperation("TheCharacteristic", [IsSubQuotientWeylModule]);

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments T
#! @Group TheLieAlgebra
DeclareAttribute("TheLieAlgebra", IsSubQuotientWeylModule );

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments T
#! @Group Weights
DeclareAttribute("Weights", IsSubQuotientWeylModule );

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments T
#! @Group DominantWeights
DeclareAttribute("DominantWeights", IsSubQuotientWeylModule );

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments T
#! @Group WeightSpaces
DeclareAttribute("WeightSpaces", IsSubQuotientWeylModule );

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments T
#! @Group Character
DeclareAttribute("Character", IsSubQuotientWeylModule );

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments T
#! @Group DominantWeightSpaces
DeclareAttribute("DominantWeightSpaces", IsSubQuotientWeylModule );

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments T,wt
#! @Group WeightSpace
DeclareOperation("WeightSpace", [IsSubQuotientWeylModule,IsList]);

#! @ChapterInfo Weyl_modules, Operations on Weyl modules and their quotients
#! @Group SocleWeyl
#! @Arguments Q
DeclareAttribute("SocleWeyl", IsQuotientWeylModule );

#! @ChapterInfo Weyl_modules, Operations on subquotients
#! @Group NextSocle4SQ
#! @Returns a SubQuotientWeylModule
#! @Arguments T
#! @Description
#! This function returns the maximal subquotient <A>T</A> containing 
#! the given subquotient <A>S</A> such that $T/S$ is semisimple. 
#! If <A>S</A> happens to be an element of the socle series then the 
#! function returns the next element in the socle series.
DeclareOperation("NextSocle", [IsSubQuotientWeylModule]);

#! @ChapterInfo Weyl modules, Operations common to all four types
#! @Arguments T
#! @Group DecompositionNumbers
DeclareAttribute("DecompositionNumbers", IsSubQuotientWeylModule );

