@Chapter Introduction

This &GAP; Package supports digital computer computations with
Weyl modules for a given simple simply-connected algebraic group $G$
in positive characteristic $p$. Actually the group $G$ itself never
appears in any of the computations, which take place instead using the
**algebra of distributions** (also known as the **hyperalgebra**) of
$G$, taken over the prime field. One should refer to <Cite
Key="Jantzen"/> for the definition of the algebra of distributions,
and other basic definitions and properties related to Weyl modules.



The algorithms are based on the method of <Cite Key = "Irving"/> (see
also <Cite Key = "Xi"/>) and build on the existing Lie algebra
functionality in &GAP;. In principle, one can work with arbitrary
weights for an arbitrary (simple) root system; in practice, the
functionality is limited by the size of the objects being computed.
If your Weyl module has dimension in the thousands, you may have to
wait a very long time for certain computations to finish.

The package is possibly most useful for doing computations in
characteristic $p$, where $p$ is relatively small relative to the
Coxeter number.  The general theory of Weyl modules <Cite
Key="Jantzen"/> includes a number of basic properties that break down
(or are not known to hold) if the characteristic is too small. In such
cases, explicit computations are often useful.

Recall that a **maximal vector** is a weight vector which is killed by
the positive unipotent radical; equivalently, it is killed by the
positive part of the algebra of distributions.

The main technical idea underlying this package is the following fact:
computing all the maximal vectors in a given Weyl module $V$
classifies the nonzero Weyl modules $W$ for which a nonzero
homomorphism from $W$ into $V$ exists. Such homological information is
a powerful aid to understanding structural properties of the Weyl
module $V$. The implementation of this idea involves a brute force
search through each dominant weight space, examing all linear
combinations (over the prime field) and compiling a list of the ones
which are maximal. This exploits the pleasant fact that for Weyl
modules of small dimension, the weight spaces tend to be small enough
to be manageable.

Versions 1.0 and 1.1 of this package were released in 2009. Their
initial development was spurred by work on the paper <Cite
Key="BDM"/>.  The discovery of the first counterexample to Donkin's
tilting module conjecture, by Bendel, Nakano, Pillen, and Sobaje <Cite
Key="BNPS"/> motivated the author to make subsequent calculations that
led to the realization that the <K>SubmoduleStructure</K> function was
not reliable. This led to the development of Version 2.0, which
eliminates the unreliable command and adds a number of new functions
that extend the capabilities of the previous version.
 
Although most of the functions deal with the simple simply-connected
case, there are a few functions for dealing with Schur algebras and
symmetric groups. Those commands are limited in scope, and provided
mainly as a convenience.


@Chapter Weyl modules

This chapter discusses the commands available for computations (in
positive characteristic $p$) with Weyl modules, quotient Weyl modules,
submodules of Weyl modules, and submodules of quotient Weyl modules.
Here the underlying Lie algebra is simply-connected and simple.


WARNING. In most cases, the dimension of space of maximal vectors
of a given dominant weight is either $0$ or $1$. Cases for which there
exist two or more independent maximal vectors of the same weight can
lead to complications, such as a lack of rigidity in the submodule
structure.  Such situations are relatively rare (and interesting). 
An example in Type $D_4$ is the Weyl
module of highest weight $[0,1,0,0]$, as pointed out on page 173 of
<Cite Key = "CPS"/>. (I am grateful to Anton Cox for this reference.)

A Weyl module (as in the previous paragraph) with at least one weight
space containing multiple linearly independent maximal vectors is
called **ambiguous**. Extra care is needed when studying ambiguous
modules.


@Section Constructors
@SectionLabel Constructors

Here we consider functions that create Weyl modules, quotients of Weyl
modules, submodules of Weyl modules, and submodules of quotient Weyl
modules (subquotients). 

@Subsection Weyl modules
@BeginGroup WeylModule
@GroupTitle WeylModule
@EndGroup WeylModule

@Subsection Quotients
@BeginGroup QuotientWeylModule
@GroupTitle QuotientWeylModule
@EndGroup QuotientWeylModule

@Subsection Submodules
@BeginGroup SubWeylModule
@GroupTitle SubWeylModule
@EndGroup SubWeylModule

@Subsection Subquotients
@BeginGroup SubQuotientWeylModule
@GroupTitle SubQuotientWeylModule
@EndGroup SubQuotientWeylModule


@Section Filters
The following filters can be used to query whether or not an object
has the indicated type. 

@Subsection IsWeylModule
@BeginGroup IsWeylModule
@GroupTitle IsWeylModule
@EndGroup IsWeylModule

@Subsection IsQuotientWeylModule
@BeginGroup IsQuotientWeylModule
@GroupTitle IsQuotientWeylModule
@EndGroup IsQuotientWeylModule

@Subsection IsSubWeylModule
@BeginGroup IsSubWeylModule
@GroupTitle IsSubWeylModule
@EndGroup IsSubWeylModule

@Subsection IsSubQuotientWeylModule
@BeginGroup IsSubQuotientWeylModule
@GroupTitle IsSubQuotientWeylModule
@EndGroup IsSubQuotientWeylModule

@Section Operations common to all four types
@SectionLabel 4types

This section documents operations and attributes that can be applied
to Weyl modules, quotients, submodules, and subquotients. In the
following, <A>V</A> is a Weyl module, <A>Q</A> is a quotient, <A>S</A>
is a submodule, and <A>T</A> is a subquotient. Section <Ref
Sect="Section_Constructors"/> documents the constructors for these
objects. Furthermore, <A>wt</A> is a weight.

In all the examples in this section, we take <A>V</A>, <A>S</A>,
<A>Q</A>, and <A>T</A> to be as follows.
@BeginExampleSession
gap> V:=WeylModule(V,[4,0]);
V[ 4, 0 ]
gap> Dim(V);
15
gap> m:= MaximalVectors(V);
[ 1*v0, y1*v0 ]
gap> S:= SubWeylModule(V,m[2]);
9-dimensional submod of V[ 4, 0 ]
gap> Q:= QuotientWeylModule(S);
6-dimensional quotient of V[ 4, 0 ]
gap> mm:= MaximalVectors(Q);
[ 1*v0, y1^(2)*v0 ]
gap> T:= SubWeylModule(Q, mm[2]);
3-dimensional submod of 6-dimensional quotient of V[ 4, 0 ]
@EndExampleSession


@Subsection BasisVecs 
@BeginGroup BasisVecs
@GroupTitle BasisVecs
@EndGroup BasisVecs

@Subsection Character 
@BeginGroup Character
@GroupTitle Character
@EndGroup Character

@Subsection DecompositionNumbers 
@BeginGroup DecompositionNumbers
@GroupTitle DecompositionNumbers
@EndGroup DecompositionNumbers

@Subsection Dim 
@BeginGroup Dim
@GroupTitle Dim
@EndGroup Dim

@Subsection DominantWeights 
@BeginGroup DominantWeights
@GroupTitle DominantWeights
@EndGroup DominantWeights

@Subsection DominantWeightSpaces 
@BeginGroup DominantWeightSpaces
@GroupTitle DominantWeightSpaces
@EndGroup DominantWeightSpaces

@Subsection Weights 
@BeginGroup Weights
@GroupTitle Weights
@EndGroup Weights

@Subsection WeightSpaces 
@BeginGroup WeightSpaces
@GroupTitle WeightSpaces
@EndGroup WeightSpaces

@Subsection WeightSpace 
@BeginGroup WeightSpace
@GroupTitle WeightSpace
@EndGroup WeightSpace

@Subsection TheCharacteristic 
@BeginGroup TheCharacteristic
@GroupTitle TheCharacteristic
@EndGroup TheCharacteristic

@Subsection TheLieAlgebra 
@BeginGroup TheLieAlgebra
@GroupTitle TheLieAlgebra
@EndGroup TheLieAlgebra


@Section Three types
@SectionTitle Operations common to Weyl modules, submodules, and quotients

In the following, <A>Q</A> is a quotient Weyl module, <A>S</A> is a
submodule, and <A>V</A> is a Weyl module.


@Subsection MaximalVectors 
@BeginGroup MaximalVectors
@GroupTitle MaximalVectors
@EndGroup MaximalVectors

@Subsection IsAmbiguous 
@BeginGroup IsAmbiguous
@GroupTitle IsAmbiguous
@EndGroup IsAmbiguous

@Subsection AmbiguousMaxVecs 
@BeginGroup AmbiguousMaxVecs
@GroupTitle AmbiguousMaxVecs
@EndGroup AmbiguousMaxVecs


@Section Operations on Weyl modules and their quotients

In the following, <A>Q</A> is a quotient Weyl module and <A>V</A> is a
Weyl module.

@Subsection ActOn 
@BeginGroup ActOn 
@GroupTitle ActOn 
@EndGroup ActOn 

@Subsection Generator 
@BeginGroup Generator
@GroupTitle Generator
@EndGroup Generator

@Subsection GensSocleLayers 
@BeginGroup GensSocleLayers
@GroupTitle GensSocleLayers
@EndGroup GensSocleLayers

@Subsection PrintSocleLayers 
@BeginGroup PrintSocleLayers
@GroupTitle PrintSocleLayers
@EndGroup PrintSocleLayers

@Subsection SocleSeries 
@BeginGroup SocleSeries
@GroupTitle SocleSeries
@EndGroup SocleSeries

@Subsection SocleWeyl
@BeginGroup SocleWeyl
@GroupTitle SocleWeyl
@EndGroup SocleWeyl


@Section Operations on Weyl modules

This section documents additional operations that can be applied to an
existing Weyl module <A>V</A>.


@Subsection MaximalSubmodule
@BeginGroup MaximalSubmodule
@GroupTitle MaximalSubmodule
@EndGroup MaximalSubmodule

@Subsection SimpleQuotient
@BeginGroup SimpleQuotient
@GroupTitle SimpleQuotient
@EndGroup SimpleQuotient



@Section Operations on quotients

In the following, <A>Q</A> is a quotient Weyl module.

@Subsection AmbientWeylModule
@BeginGroup Ambient4Q
@GroupTitle AmbientWeylModule
@EndGroup Ambient4Q

@Subsection DefiningKernel
@BeginGroup DefiningKernel
@GroupTitle DefiningKernel
@EndGroup DefiningKernel



@Section Operations on submodules

In the following, <A>S</A> is a submodule.

@Subsection AmbientWeylModule
@BeginGroup Ambient4Sub
@GroupTitle AmbientWeylModule
@EndGroup Ambient4Sub

@Subsection Generators
@BeginGroup Generators4Sub
@GroupTitle Generators
@EndGroup Generators4Sub

@Subsection IsWithin
@BeginGroup IsWithin4Sub
@GroupTitle IsWithin
@EndGroup IsWithin4Sub

@Subsection NextSocle
@BeginGroup NextSocle
@GroupTitle NextSocle
@EndGroup NextSocle

@Subsection GensNextSocle
@BeginGroup GensNextSocle
@GroupTitle GensNextSocle
@EndGroup GensNextSocle

@Subsection SocleLengthTwoQuotient
@BeginGroup SocleLengthTwoQuotient
@GroupTitle SocleLengthTwoQuotient
@EndGroup SocleLengthTwoQuotient

@Subsection TwoFactorQuotientsContaining
@BeginGroup TwoFactorQuotientsContaining
@GroupTitle TwoFactorQuotientsContaining
@EndGroup TwoFactorQuotientsContaining


@Section Operations on subquotients

In the following, <A>T</A> is a subquotient.

@Subsection AmbientQuotient
@BeginGroup AmbientQuotient4SQ
@GroupTitle AmbientQuotient
@EndGroup AmbientQuotient4SQ

@Subsection Generators
@BeginGroup Generators4SQ
@GroupTitle Generators
@EndGroup Generators4SQ

@Subsection IsWithin
@BeginGroup IsWithin4SQ
@GroupTitle IsWithin
@EndGroup IsWithin4SQ

@Subsection NextSocle
@BeginGroup NextSocle4SQ
@GroupTitle NextSocle
@EndGroup NextSocle4SQ




@Chapter Weights and Characters
This chapter documents additional functions available for computation of
weights and characters.

@Section Weights

@Section Characters

We have already seen a function `Character` in the preceding chapter,
that computes the (formal) character of a given Weyl module, quotient,
submodule, or subquotient. We now consider some additional functions
for computing characters.


@BeginGroup SimpleCharacter
@GroupTitle SimpleCharacter
@EndGroup SimpleCharacter


@Chapter Schur Algebras
The decomposition numbers for the algebraic group $SL_n$ of type
$A_{n−1}$ determine the decomposition numbers for the corresponding
Schur algebras, and thus also determine the decomposition numbers for
symmetric groups. People working with Schur algebras and symmetric
groups often prefer to use partitions to label highest
weights. Although it is trivial to convert between $SL_n$ weight
notation and partition notation, for the sake of convenience, we
provide a few functions that perform such conversions, and various
other functions related to Schur algebras and symmetric groups.

NOTE. The functions for symmetric groups are quite slow, so readers
interested in symmetric group computations may want to look elsewhere
for more effcient tools.


@Section Constructor

@Section Decomposition matrices

@Section Partitions


